Make cluster
create policy


sts.amazonaws.com



helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
helm install -n kube-system csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver


k api-resources
k get csidrivers
k get csinodes


kubectl apply -f https://raw.githubusercontent.com/aws/secrets-store-csi-driver-provider-aws/main/deployment/aws-provider-installer.yaml

k get sa -n kube-system | grep -i csi


kubectl describe clusterrole csi-secrets-store-provider-aws-cluster-role
kubectl describe clusterrolebinding csi-secrets-store-provider-aws-cluster-rolebinding


apiVersion: v1
kind: ServiceAccount
metadata:
 name: nginx-deployment-sa
 annotations:
  eks.amazonaws.com/role-arn: arn:aws:iam::824813378441:role/secret-ok


apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: my-secret-provider
  namespace: default
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: "check"    # AWS Secrets Manager secret name
        objectType: "secretsmanager"



"<oidc>:sub":"system:serviceaccount:default:nginx-deployment-sa"


aws eks update-kubeconfig --region region-code --name cc

---

apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: my-secret-provider
  namespace: default
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: "my-secret"    # AWS Secrets Manager secret name
        objectType: "secretsmanager"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      serviceAccountName: nginx-deployment-sa  # Ensure the SA has the right IAM permissions
      containers:
        - name: nginx
          image: nginx:latest
          volumeMounts:
            - name: secret-volume
              mountPath: "/mnt/secrets"
              readOnly: true
      volumes:
        - name: secret-volume
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "my-secret-provider"




{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "sts:AssumeRoleWithWebIdentity",
            "Principal": {
                "Federated": "arn:aws:iam::824813378441:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/AA754351B696ADA18F7680301B3B3900"
            },
            "Condition": {
                "StringEquals": {
                    "oidc.eks.us-east-1.amazonaws.com/id/AA754351B696ADA18F7680301B3B3900:sub": "system:serviceaccount:default:my-service-account"
                }
            }
        }
    ]
}


----

# Error
Error: secret "mongo-db-secrets-csi" not found

Change cluster role and binding 


apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: csi-secrets-store-provider-aws-cluster-role
rules:
- apiGroups: [""]
  resources: ["serviceaccounts/token"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch", "create", "update", "delete"]


apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: csi-secrets-store-provider-aws-cluster-rolebinding
subjects:
- kind: ServiceAccount
  name: csi-secrets-store-provider-aws
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-secrets-store-provider-aws-cluster-role
  apiGroup: rbac.authorization.k8s.io

kubectl delete pod -n kube-system -l app=secrets-store-csi-driver
kubectl delete pod -n kube-system -l app=csi-secrets-store-provider-aws

